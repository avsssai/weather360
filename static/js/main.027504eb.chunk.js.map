{"version":3,"sources":["Input.jsx","WeatherInfo.jsx","Header.jsx","Weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleSubmit","e","preventDefault","target","value","react_default","a","createElement","onSubmit","className","id","type","placeholder","onChange","React","Component","WeatherInfo","icon","current","faSun","faCloudShowersHeavy","includes","faCloudSun","faCloudRain","location","index_es","temperatureInCelcius","temperatureInFarenheit","Header","Weather","state","cityName","data","temperatureInC","temperatureInF","getWeather","setState","city","_this2","fetch","concat","then","res","json","getData","catch","err","undefined","name","temp_c","temp_f","text","condition","console","log","src_Header","src_Input","src_WeatherInfo","App","src_Weather","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.027504eb.chunk.js","sourcesContent":["import React from \"react\";\nimport './styles.css';\n\nclass Input extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleSubmit(e){\n    e.preventDefault();\n    this.props.handleSubmit();\n  }\n  handleChange(e){\n    this.props.handleChange(e.target.value);\n  }\n  render() {\n    return (\n    \n      <form onSubmit={this.handleSubmit}>\n        <div className=\"input-group\">\n          <input\n            className='form-control'\n            id=\"input\"\n            type=\"text\"\n            placeholder=\"Enter the city name..\"\n            onChange={this.handleChange}\n            value={this.props.value}\n          />\n        \n        <button className='btn btn-primary ml-3' id='button' >Search</button>\n        </div>\n        \n      </form>\n    );\n  }\n}\n\nexport default Input;","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n// import { faThumbsUp } from '@fortawesome/free-solid-svg-icons';\nimport { faSun,faCloudSun,faCloudShowersHeavy,faCloudRain} from '@fortawesome/free-solid-svg-icons';\n\n\nclass WeatherInfo extends React.Component {\n    \n  render() {\n    // var icon;\n    // if(this.props.current === 'Clear'){\n    //     icon = <i className=\"fas fa-sun\"></i>\n    // }\n    var icon;\n    if(this.props.current === 'Clear'){\n        icon = faSun;\n    }if(this.props.current === 'Overcast' ){\n        icon = faCloudShowersHeavy;\n    }if(this.props.current.includes('cloud')){\n        icon = faCloudSun;\n    }if(this.props.current.includes('rain')){\n        icon = faCloudRain;\n    }\n    if(this.props.current === 'Cloudy'){\n        icon = faCloudSun;\n    }\n    if(this.props.current.includes('rain')){\n        icon = faCloudRain;\n    }\n    if(this.props.current === 'Sunny'){\n        icon = faSun;\n    }\n\n    \n\n    return (\n      <div className=\"container\" id='weather-info'>\n        <div className=\"row justify-content-center\">\n          <div className=\"col-2\" />\n          <div className=\"col-8\">\n            <div className=\"card text-center\">\n              <div className=\"card-header\">\n                <h2>{this.props.location}</h2>\n              </div>\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">{this.props.current} <FontAwesomeIcon icon={ icon }/>\n </h5>\n                <div className=\"card-text\">\n                  <div className=\"container\">\n                    <div className=\"row justify-content-center\">\n                      <div className=\"col-5\">\n                        <h1>{this.props.temperatureInCelcius} &#176;C</h1>\n                      </div>\n                      <div className=\"col-5\">\n                        <h1>{this.props.temperatureInFarenheit} &#176;F</h1>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-2\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WeatherInfo;\n","import React from 'react';\n\nclass Header extends React.Component{\n    render(){\n        return(\n\n            <div className=\"container mt-3\">\n                <div className=\"row justify-content-md-center\">\n                    <div className=\"col-2\"></div>\n                    <div className=\"col-8\">\n                        <h1 className='text-center'>Weather App</h1>\n                    </div>\n                    <div className=\"col-2\"></div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default Header;","import React from 'react';\nimport Input from \"./Input\";\nimport WeatherInfo from './WeatherInfo';\nimport Header from './Header';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './styles.css';\n\n\nclass Weather extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            cityName :'',\n            data:[],\n            location:'',\n            temperatureInC:'',\n            temperatureInF:'',\n            current:''\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    \n    componentWillMount(){\n       this.getWeather('paris');\n    }\n    handleChange(value){\n        this.setState({\n            cityName:value\n        })\n    }\n    getWeather(city){\n        fetch(`https://api.apixu.com/v1/current.json?key=2da827a3ce074ddb854173742190807&q=${city}`)\n            .then(res=>res.json())\n            .then(data=>{\n        \n                this.getData(data);\n            })\n            .catch(err=>{\n                throw err;\n            })\n    }\n    getData(data){\n\n                        if(data.location === undefined){\n                            data.location.name='cannot fetch the weather in that city.'\n                        }else{\n                            var location = data.location.name;\n                            var temperatureInCelcius = data.current.temp_c;\n                            var temperatureInFarenheit = data.current.temp_f;\n                            var text = data.current.condition.text;\n                    \n                        }\n\n        \n        \n\n        this.setState({\n            data:data,\n            location:location,\n            temperatureInC:temperatureInCelcius,\n            temperatureInF:temperatureInFarenheit,\n            current:text\n\n        })\n        console.log(this.state.location,this.state.value);\n        console.log(this.state.data);\n        console.log(this.state.current);\n    }\n    handleSubmit(){\n        var cityName = this.state.cityName;\n        if(cityName === ''){\n            return;\n        }\n        this.getWeather(cityName);\n        this.setState({cityName:''})\n        \n    }\n\n    render(){\n        return(\n            <div className=\"container \">\n                <div className=\"row justify-content-md-center \">\n                    <div className=\"col-2\"></div>\n                    <div className=\"col-8\">\n                        <Header></Header>\n                        <Input handleChange={this.handleChange} handleSubmit={this.handleSubmit} value={this.state.cityName} className='weather-input'></Input>\n                        <WeatherInfo  location={this.state.location}\n                            temperatureInCelcius={this.state.temperatureInC}\n                            temperatureInFarenheit={this.state.temperatureInF}\n                            current={this.state.current}\n                            className='weather-info'\n                        ></WeatherInfo>\n                    </div>\n                    <div className=\"col-2\"></div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Weather;\n","import React from 'react';\n// import Input from './Input';\nimport Weather from './Weather';\n\nclass App extends React.Component{\n  render(){\n    return(\n        <Weather ></Weather>\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}